searchState.loadedDescShard("alloy_zksync", 0, "This crate provides implementation of the ZKsync network …\nEvent with signature …\nFunction with signature <code>create(bytes32,bytes32,bytes)</code> and …\nContainer type for the return parameters of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe inner struct.\nAll fields not present in the inner struct.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEIP-1559 transaction type.\nEIP-2930 transaction type.\nEIP-4844 transaction type.\nZKsync-specific EIP712-based transaction type.\nLegacy transaction type.\nTransaction types supported by the Era network.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA ZKsync-native transaction type with additional fields. …\nEIP-155: Simple replay attack protection\nReturns the effective gas price for the given <code>base_fee</code>.\nZKsync-specific fields.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA scalar value equal to the maximum amount of gas that …\nThe 32-byte hash of the bytecode of a zkSync contract is …\nInput has two uses depending if transaction is Create or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA scalar value equal to the maximum amount of gas that …\nMax Priority fee that transaction is paying\nA scalar value equal to the number of transactions sent by …\nA custom serialization is needed (otherwise RLP treats it …\nAddress of the receiver of the message. Unlike with other …\nA scalar value equal to the number of Wei to be …\nAn error occurred while deserializing a private key.\nBuilder for launching <code>era_test_node</code>.\nErrors that can occur when working with the <code>EraTestNode</code>.\nAn era_test_node CLI instance. Will close the instance …\nAn error occurred while parsing a hex string.\nNo private keys were found.\nThe child era_test_node process’s stderr was not …\nThe port could not be parsed.\nThe private key could not be parsed.\nA line could not be read from the geth stderr.\nSpawning the era_test_node process failed.\nTimed out waiting for a message from era_test_node’s …\nReturns the addresses used to instantiate this instance\nAdds an argument to pass to the <code>era_test_node</code>.\nAdds multiple arguments to pass to the <code>era_test_node</code>.\nCreates an EraTestNode builder which will execute …\nReturns the chain of the era_test_node instance\nSets the chain_id the <code>era_test_node</code> instance will use.\nReturns a reference to the child process.\nReturns a mutable reference to the child process.\nReturns the HTTP endpoint of this instance\nReturns the HTTP endpoint url of this instance\nSets the <code>fork</code> argument to fork from another currently …\nSets the <code>fork-block-number</code> which will be used in addition …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the private keys used to instantiate this instance\nCreates an empty EraTestNode builder. The default port is …\nSets the <code>path</code> to the <code>era_test_node</code> cli\nReturns the port of this instance\nSets the port which will be used when the <code>era_test_node</code> …\nConsumes the builder and spawns <code>era_test_node</code>.\nSets the timeout which will be used when the <code>era_test_node</code> …\nConsumes the builder and spawns <code>era_test_node</code>. If spawning …\nResponse type for <code>zks_estimateFee</code>.\nEstimate transaction gas for EIP712 transactions.\nReturns the argument unchanged.\nAmount of gas to be spent on the transaction.\nMaximum gas user agrees to spend on a single pubdata byte …\nGets the L1 batch number.\nGets the L1 Chain ID\nGets the address of the main ZKsync contract on L1.\nGets the address of the testnet paymaster ZKsync contract …\nCalls <code>U::from(self)</code>.\nEIP-1559 gas price.\nEIP-1559 tip.\nConvenience function to initialize provider builder for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA layer that wraps an <code>EraTestNode</code> config.\nA provider that wraps an <code>EraTestNodeInstance</code>, preventing …\nGet the instance http endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStarts the anvil instance, or gets a reference to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>EraTestNodeProvider</code> with the given inner …\nA wallet capable of signing any transaction for the …\nGet the default signer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new signer with the given signer as the default …\nRegister a new signer on this object, and set it as the …\nRegister a new signer on this object. This signer will be …\nGet the signer for the given address.")